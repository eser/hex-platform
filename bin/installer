#!/bin/bash

function pause(){
 read -s -n 1 -p "Press any key to continue . . ."
 echo ""
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Download external YAMLs
if [ ! -f $DIR/../tmp/ambassador-operator-crds.yaml ]; then
  echo "Downloading external YAMLs..."
  curl -Lo $DIR/../tmp/ambassador-operator-crds.yaml https://github.com/datawire/ambassador-operator/releases/latest/download/ambassador-operator-crds.yaml
  curl -Lo $DIR/../tmp/knative-serving-crds.yaml https://github.com/knative/serving/releases/download/v0.16.0/serving-crds.yaml
  curl -Lo $DIR/../tmp/knative-serving-core.yaml https://github.com/knative/serving/releases/download/v0.16.0/serving-core.yaml
  curl -Lo $DIR/../tmp/knative-serving-hpa.yaml https://github.com/knative/serving/releases/download/v0.16.0/serving-hpa.yaml
fi

# Kubectl Terraform Provider
if [ ! -f ~/.terraform.d/plugins/terraform-provider-kubectl ]; then
  echo "Downloading Kubectl Terraform Provider..."
  mkdir -p ~/.terraform.d/plugins && \
    curl -Ls https://api.github.com/repos/gavinbunney/terraform-provider-kubectl/releases/latest \
    | jq -r ".assets[] | select(.browser_download_url | contains(\"$(uname -s | tr A-Z a-z)\")) | select(.browser_download_url | contains(\"amd64\")) | .browser_download_url" \
    | xargs -n 1 curl -Lo ~/.terraform.d/plugins/terraform-provider-kubectl && \
    chmod +x ~/.terraform.d/plugins/terraform-provider-kubectl
fi

# Terraform Initialization
echo "Initializing Terraform..."

terraform init $DIR/../src/environments/playground/

# Terraform Apply
echo "Executing Terraform Apply..."

terraform apply $DIR/../src/environments/playground/

# # Prometheus Operator
# helm install prometheus-operator prometheus-operator \
#   --repo https://charts.bitnami.com/bitnami \
#   --namespace monitoring \
#   --create-namespace \
#   --atomic

# # Ambassador CRDs
# kubectl apply --filename \
#   https://github.com/datawire/ambassador-operator/releases/latest/download/ambassador-operator-crds.yaml

# # Ambassador Operator
# helm install ambassador-operator ambassador-operator \
#   --repo https://getambassador.io \
#   --namespace ambassador \
#   --create-namespace \
#   --atomic

# # Ambassador Installation
# helm install ambassador-installation ./helm-charts/hex-common-ambassador/ \
#   --namespace ambassador \
#   --atomic

# # Knative Serving CRDs
# kubectl apply --filename \
#   https://github.com/knative/serving/releases/download/v0.16.0/serving-crds.yaml

# # Knative Serving
# kubectl apply --filename \
#   https://github.com/knative/serving/releases/download/v0.16.0/serving-core.yaml

# # Knative - Ambassador Binding
# kubectl patch clusterrolebinding ambassador \
#   -patch '{"subjects":[{"kind": "ServiceAccount", "name": "ambassador", "namespace": "ambassador"}]}'
# kubectl set env --namespace ambassador deployments/ambassador AMBASSADOR_KNATIVE_SUPPORT=true
# kubectl patch configmap/config-network \
#   --namespace knative-serving \
#   --type merge \
#   --patch '{"data":{"ingress.class":"ambassador.ingress.networking.knative.dev"}}'

# # Knative Serving - HPA
# kubectl apply --filename \
#   https://github.com/knative/serving/releases/download/v0.16.0/serving-hpa.yaml

# # Linkerd CLI
# curl -sL https://run.linkerd.io/install | sh
# export PATH=$PATH:$HOME/.linkerd2/bin
# linkerd install | kubectl apply -f -

# # TODO bind to existing prometheus
# # # Linkerd
# # helm install linkerd linkerd2 \
# #   --repo https://helm.linkerd.io/stable \
# #   --namespace ambassador \
# #   --create-namespace \
# #   --atomic


# # Linkerd Bindings
# kubectl annotate ns ambassador knative-serving default linkerd.io/inject=enabled

# # Restart
# kubectl rollout restart deploy -n ambassador
# kubectl rollout restart deploy -n knative-serving

# # Flagger
# # helm install flagger flagger \
# #   --repo https://flagger.app \
# #   --namespace=linkerd \
# #   --set crd.create=false \
# #   --set meshProvider=linkerd \
# #   --set metricsServer=http://linkerd-prometheus:9090 \
# #   --atomic
